# AUTOGENERATED FROM build-test-windows-x86.jsonnet DO NOT MODIFY
jobs:
  build-core:
    defaults:
      run:
        shell: bash
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: 5.2.1
          opam-local-packages: dont_install_local_packages.opam
      - name: Install older openssl in Cygwin
        run: |
          PACKAGES='mingw64-x86_64-openssl=1.0.2u+za-1,mingw64-i686-openssl=1.0.2u+za-1'
          CYGWIN_ROOT=$(cygpath -w /)
          $CYGWIN_ROOT/setup-x86_64.exe -P $PACKAGES --quiet-mode -R $CYGWIN_ROOT
      - env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2
        name: Set GHA cache for OPAM in _opam
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-v1-opam-5.2.1-${{ hashFiles('semgrep-pro.opam', 'OSS/semgrep.opam') }}
          path: _opam
      - name: Install flexlink patched to use response files and cygpath -file arg
        run: |
          git clone -b argument-list-too-long https://github.com/punchagan/flexdll.git
          cd flexdll/
          opam exec -- make all MSVC_DETECT=0 CHAINS="mingw64"
          cp flexlink.exe ../_opam/bin/
      - name: Debug stuff
        run: |
          ls
          # to see the bin symlink for example
          ls -l
          set
          # tree-sitter fails to compile without an ar, you can use
          # CC=x86_64-w64-mingw32-gcc but there is no AR=x86_64-w64-mingw32-ar
          which ar
          ar --version
          which ar
          ar --version
          which opam
          # this should be fdopen's opan, so 2.0.10
          opam --version
          opam repo
          # we should be on 4.14.0~mingw
          opam switch
      - env:
          CC: x86_64-w64-mingw32-gcc
        name: Build tree-sitter
        run: |
          cd libs/ocaml-tree-sitter-core
          ./configure
          ./scripts/download-tree-sitter --lazy
          prefix="$(pwd)/tree-sitter"
          cd downloads/tree-sitter
          make PREFIX="$prefix" CFLAGS="-O3 -Wall -Wextra"
          make PREFIX="$prefix" install
      - name: Install OPAM deps
        run: |
          make install-deps-WINDOWS-for-semgrep-core
          # NOTE: ocurl's ./configure fails with an error finding curl/curl.h.
          # Setting PKG_CONFIG_PATH to $(x86_64-w64-mingw32-gcc
          # -print-sysroot)/mingw/include would set UNIX paths for CFLAG and
          # LDFLAG, but that doesn't work. Setting Windows PATHs for them gets
          # the ocurl build to work. To avoid setting these PATHs for all the
          # package builds, we first try to install all the dependencies, and
          # then install ocurl and later other dependencies that depend on ocurl.
          make install-opam-deps || true
          export CYGWIN_SYS_ROOT="$(x86_64-w64-mingw32-gcc --print-sysroot)"
          CFLAGS="-I$(cygpath -w $CYGWIN_SYS_ROOT/mingw/include)" LDFLAGS="-L$(cygpath -w $CYGWIN_SYS_ROOT/mingw/lib)" opam install -y ocurl.0.9.1
          make install-opam-deps
      - name: Build semgrep-core
        run: |
          export TREESITTER_INCDIR=$(pwd)/libs/ocaml-tree-sitter-core/tree-sitter/include
          export TREESITTER_LIBDIR=$(pwd)/libs/ocaml-tree-sitter-core/tree-sitter/lib
          # We have to strip rpath from the tree-sitter projects because there's no
          # equivalent in Windows
          # TODO: investigate removing rpath from the tree-sitter projects
          for filename in $(find ./languages/ ./libs/ocaml-tree-sitter-core/ -name dune); do
            grep -v rpath $filename > $filename.new
            mv $filename.new $filename
          done
          opam exec -- dune build _build/install/default/bin/semgrep-core.exe
      - name: Test semgrep-core
        run: |
          _build/install/default/bin/semgrep-core.exe -l python -rules tests/windows/rules.yml -json tests/windows/test.py
      - name: Package semgrep-core
        run: |
          mkdir artifacts
          cp _build/install/default/bin/semgrep-core.exe artifacts/

          # TODO: somehow upgrade to the latest flexdll, which should allow us
          # to statically link these libraries
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libstdc++-6.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgcc_s_seh-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libwinpthread-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpcre-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libgmp-10.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libcurl-4.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libpcre2-8-0.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libeay32.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libidn2-0.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libnghttp2-14.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libssh2-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/ssleay32.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libzstd-1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/zlib1.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/iconv.dll artifacts/
          cp d:/cygwin/usr/x86_64-w64-mingw32/sys-root/mingw/bin/libintl-8.dll artifacts/

          tar czvf artifacts.tgz artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: semgrep-core-and-dependent-libs-w64-artifact-${{ github.sha }}
          path: artifacts.tgz
  build-wheels:
    defaults:
      run:
        shell: bash
    needs:
      - build-core
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@v4
        with:
          name: semgrep-core-and-dependent-libs-w64-artifact-${{ github.sha }}
      - env:
          SEMGREP_FORCE_INSTALL: 1
        run: |
          tar xvfz artifacts.tgz
          cp artifacts/* cli/src/semgrep/bin
          ./scripts/build-wheels.sh --plat-name win_amd64
      - uses: actions/upload-artifact@v4
        with:
          name: windows-x86-wheel
          path: cli/dist.tgz
  test-wheels:
    defaults:
      run:
        shell: bash
    needs:
      - build-wheels
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: windows-x86-wheel
      - run: tar xzvf dist.tgz
      - name: install package
        run: pip3 install dist/*.whl
      - name: test package
        run: semgrep --version
      - name: e2e semgrep-core test
        run: echo '1 == 1' | semgrep -l python -e '$X == $X' -
name: build-test-windows-x86
on:
  workflow_call:
    inputs:
      use-cache:
        default: true
        description: Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build.
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      use-cache:
        default: true
        description: Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build.
        required: true
        type: boolean
